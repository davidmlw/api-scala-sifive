def buildTargetScalaModulesByName =
  def scalaModules = subscribe buildTargetScalaModules
  def logWarnings (Pair name buildTargets) =
    def _ = match buildTargets
      _, _, _ =
        def messages =
          "found multiple ScalaModules named '{name}':",
          map ("- {_.format}") buildTargets
        messages
        | catWith "\n"
        | printlnLevel logError
      _ = Unit
    Pair name buildTargets

  def foldFn acc pair =
    def _ = logWarnings pair
    match pair
      Pair name (head, _) = name → head, acc
      Pair name Nil = acc

  groupBy getScalaModuleName scalaModules
  | tfoldl foldFn Nil

def jScalaVersion =
  jMap2
  makeScalaVersion
  (jField "major" jInteger)
  (jField "minor" jInteger)

def jScalaModuleOptionsFn jPath jScalaModuleRecurse =
  jMapBegin
  | jMapAdd (jField "name" jString)
  | jMapAdd (jField "rootDir" jString)
  | jMapAdd (jFieldOption "dependencies" (jArrayMap jScalaModuleRecurse))
  | jMapAdd (jFieldOption "sourceDirs" (jArrayMap jString))
  | jMapAdd (jFieldOption "resourceDirs" (jArrayMap jString))
  | jMapAdd (jFieldOption "generatedSources" (jNestedArrayMap jPath))
  | jMapAdd (jFieldOption "scalacOptions" (jNestedArrayMap jString))
  | jMapAdd (jFieldOption "compilerPlugins" (jNestedArrayMap jString))
  | jMapEnd (
    \name
    \rootDir
    \dependenciesResults
    \sourceDirs
    \resourceDirs
    \generatedSources
    \scalacOptions
    \pluginPairs match (getOrElse Nil dependenciesResults).findFail
      Fail e = Fail e
      Pass dependencies =
        def pluginResults =
          def fn name = match name.stringToIvyDep
            Some ivyDep = Pass ivyDep
            None = Fail name
          pluginPairs
          | getOrElse Nil
          | map fn
        def passes = mapPartial getPass pluginResults
        def fails = mapPartial getFail pluginResults
        match passes fails
          compilerPlugins Nil = Pass (
            _
            | setScalaModuleName name
            | setScalaModuleRootDir rootDir
            | setScalaModuleDeps dependencies
            | setScalaModuleSourceDirs (sourceDirs | getOrElse ("src/main/scala", "src/main/java", Nil))
            | setScalaModuleResourceDirs (sourceDirs | getOrElse ("src/main/resource", Nil))
            | setScalaModuleFnGeneratedSources (\_ generatedSources | getOrElse Nil)
            | setScalaModuleScalacOptions (scalacOptions | getOrElse Nil)
            | setScalaModuleCompilerPlugins compilerPlugins
          )
          _ fails = Fail "invalid compiler plugins dependencies: {catWith ", " fails}".makeError
  )

def getScalaModuleResult scalaModule =
  scalaModule
  | getScalaModuleError
  | omap Fail
  | getOrElse (Pass scalaModule)

def jScalaModuleNoIvyDeps =
  jField "scalaVersion" jScalaVersion
  | jMap (makeScalaModule "" "" _)

def jScalaModuleWithIvyDeps jPath =
  jField "ivyDependencies" jPath
  | jMap (makeScalaModuleFromJSON "{_.getPathName}/..".simplify "")

def scalaModuleJSONField = "paramsJSON"

def jScalaModuleEnum =
  jMap Pass (jStringEnum buildTargetScalaModulesByName)

def jScalaModuleVerbose jPath recurse =
  jMap2
  (\baseScalaModule \optionsFn rmap (_ baseScalaModule) optionsFn)
  (jOneOf (jScalaModuleNoIvyDeps, jScalaModuleWithIvyDeps jPath, Nil))
  (jScalaModuleOptionsFn jPath recurse)

def jScalaModuleImp jPath recurse =
  jOneOf (
    jScalaModuleEnum,
    jScalaModuleVerbose jPath recurse,
    Nil
  )

global def jScalaModule jPath = jRecursive (jScalaModuleImp jPath)


publish buildTargets = scalaModuleBuildTarget, Nil

global def scalaModuleBuildTarget =
  baseBuildTargetPlan "scala-module"
  | dependsOnUnnamedFn jScalaModule
  | definedAs (
    \scalaModuleResult \_ match scalaModuleResult
      Fail e = Fail e
      Pass scalaModule =
        scalaModule
        | scalaModuleClasspath
        | findFailFn getPathResult
  )
  | exports (\classpath bObject (
    "classpath" → bArray (map bPath classpath),
    Nil
  ))
  | makeBuildTarget
