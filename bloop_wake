#!/usr/bin/env python3
"""Bloop Wake Wrapper

This script wraps Bloop (https://scalacenter.github.io/bloop/) to make it
relocatable.

It checks to see if Bloop is already running, if it is not, it launches Bloop
with a timeout. It then takes a bloop config template (with $WORKSPACE
wildcards) and replaces them with absolute paths to make a real bloop config
file. This "real" bloop config file can then be used by bloop for compilation.
The config files are generated every time in order to make this relocatable.
"""
# TODO Should the path to the jar command be an argument?

import os
import sys
import time
import subprocess
import argparse
import re
import shutil
import json

if sys.version_info[0] < 3 or sys.version_info[1] < 5:
    print("This program requires Python version 3.5 or newer!")
    sys.exit(1)

SCRIPT_DIR = os.path.dirname(os.path.realpath(__file__))
SCRIPT_NAME = os.path.basename(__file__)


def pid_file():
    return "{}/.bloop_timeout.pid".format(SCRIPT_DIR)


def timeout_exe():
    return "{}/bloop_timeout".format(SCRIPT_DIR)


def bloop_exe(directory):
    return "{}/bloop".format(directory)


def bloop_launcher(directory):
    return "{}/blp-server".format(directory)


def launch_timeout():
    cmd = [timeout_exe()]
    proc = subprocess.Popen(cmd, stdout=subprocess.PIPE)
    # Wait until we get signal from subprocess that it has successfully written
    # the pid file. Child indicates it has done something by printing to stdout
    proc.stdout.read(1)


def is_bloop_running(directory):
    proc = subprocess.run([bloop_exe(directory), "about"],
                          stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    return proc.returncode == 0


# FIXME Can we verify that *we* successfully launched it?
# Maybe compare the PID of our launched daemon and the actual PID?
#  ^ This probably won't work because we're using blp-server
def do_launch_bloop(directory):
    """
    Launches bloop and then waits until it is running
    """
    cmd = ["sh", bloop_launcher(directory)] # FIXME why is "sh" necessary?
    # Use parent PATH and override TERM to suppress annoying
    #  "tput: No value for $TERM and no -T specified"
    env = { "PATH": os.environ["PATH"], "TERM": "dumb" }
    # TODO can we send stdout/err to /dev/null?
    proc = subprocess.Popen(cmd, stdout=subprocess.DEVNULL,
                            stderr=subprocess.DEVNULL, env=env)
    while not is_bloop_running(directory):
        # FIXME better wait amount?
        time.sleep(0.1)


# TODO Check this algorithm and if it's properly threadsafe
def launch_bloop(directory):
    """
    Checks if bloop is running, if not, launches it with a timeout
    """
    launched_timeout = False
    if os.path.isfile(pid_file()):
        launch_timeout()
        launched_timeout = True

    if is_bloop_running(directory):
        print("[{}] Bloop is already running!".format(SCRIPT_NAME))
        # Do we need to do this again?
        if not launched_timeout and os.path.isfile(pid_file()):
            launch_timeout()
            launched_timeout = True
    else:
        print("[{}] Launching Bloop!".format(SCRIPT_NAME))
        do_launch_bloop(directory)
        if not launched_timeout:
            launch_timeout()
            launched_timeout = True

    if launched_timeout:
        print("[{}] We are managing the bloop server".format(SCRIPT_NAME))


def run_bloop(bloop, args):
    arglist = args.split()
    proc = subprocess.run([bloop] + arglist, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    return proc.returncode == 0


def create_config_file(workspace, infile, outfile):
    with open(infile, "r") as fin:
        with open(outfile, "w") as fout:
            for line in fin.readlines():
                fout.write(re.sub(r'\$WORKSPACE', str(workspace), line))


def jar_class_files(bloopconfig, jarfile):
    classes_dir = ""
    with open(bloopconfig, "r") as json_file:
        data = json.load(json_file)
        classes_dir = data['project']['classesDir']
    # TODO Better error handling
    assert os.path.isdir(classes_dir)
    cmd = ["jar", "cMf", jarfile, "-C", classes_dir, "."]
    proc = subprocess.run(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    return proc.returncode == 0


def get_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('--workspace', default=os.getcwd(), type=str,
                        help='Path to top of workspace, defaults to os.getcwd()')
    parser.add_argument('--bloop-dir', '-b', required=True, type=str,
                        help='Path to bloop install directory, relative to workspace')
    parser.add_argument('--config-template', '-t', required=True, type=str,
                        help='Path to bloop config template, relative to workspace.')
    parser.add_argument('--config-file', '-c', required=True, type=str,
                        help='Path to bloop config output, relative to workspace.')
    parser.add_argument('--bloop-args', required=True, help='Arguments passed to bloop')
    parser.add_argument('--jar', required=True, help='Output jar file for compiled class files')

    return parser.parse_args()


def main():
    args = get_args()

    launch_bloop(args.bloop_dir)

    create_config_file(args.workspace, args.config_template, args.config_file)

    run_bloop(bloop_exe(args.bloop_dir), args.bloop_args)

    jar_class_files(args.config_file, args.jar)


if __name__ == "__main__":
    main()
