#!/usr/bin/env python3
"""Bloop Wake Wrapper

This script wraps Bloop (https://scalacenter.github.io/bloop/) to make it
relocatable.

It checks to see if Bloop is already running, if it is not, it launches Bloop
with a timeout.
"""

import os
import sys
import time
import subprocess
import argparse
import re
import shutil
from pathlib import Path
import fileinput

if sys.version_info[0] < 3 or sys.version_info[1] < 5:
    print("This program requires Python version 3.5 or newer!")
    sys.exit(1)

SCRIPT_DIR = os.path.dirname(os.path.realpath(__file__))
SCRIPT_NAME = os.path.basename(__file__)


def pid_file():
    return "{}/.bloop_timeout.pid".format(SCRIPT_DIR)


def timeout_exe():
    return "{}/bloop_timeout".format(SCRIPT_DIR)


def bloop_exe(directory):
    return "{}/bloop".format(directory)


def bloop_launcher(directory):
    return "{}/blp-server".format(directory)


def launch_timeout():
    cmd = [timeout_exe()]
    proc = subprocess.Popen(cmd, stdout=subprocess.PIPE)
    # Wait until we get signal from subprocess that it has successfully written
    # the pid file. Child indicates it has done something by printing to stdout
    proc.stdout.read(1)


def is_bloop_running(directory):
    proc = subprocess.run([bloop_exe(directory), "about"],
                          stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    return proc.returncode == 0


# FIXME Can we verify that *we* successfully launched it?
# Maybe compare the PID of our launched daemon and the actual PID?
#  ^ This probably won't work because we're using blp-server
def do_launch_bloop(directory):
    """
    Launches bloop and then waits until it is running
    """
    cmd = ["sh", bloop_launcher(directory)] # FIXME why is "sh" necessary?
    # Use parent PATH and override TERM to suppress annoying
    #  "tput: No value for $TERM and no -T specified"
    env = { "PATH": os.environ["PATH"], "TERM": "dumb" }
    # TODO can we send stdout/err to /dev/null?
    proc = subprocess.Popen(cmd, stdout=subprocess.DEVNULL,
                            stderr=subprocess.DEVNULL, env=env)
    while not is_bloop_running(directory):
        # FIXME better wait amount?
        time.sleep(0.1)


def launch_bloop(directory):
    """
    Checks if bloop is running, if not, launches it with a timeout
    """
    launched_timeout = False
    if os.path.isfile(pid_file()):
        launch_timeout()
        launched_timeout = True

    if is_bloop_running(directory):
        print("[{}] Bloop is already running!".format(SCRIPT_NAME))
        # Do we need to do this again?
        if not launched_timeout and os.path.isfile(pid_file()):
            launch_timeout()
            launched_timeout = True
    else:
        print("[{}] Launching Bloop!".format(SCRIPT_NAME))
        do_launch_bloop(directory)
        if not launched_timeout:
            launch_timeout()
            launched_timeout = True

    if launched_timeout:
        print("[{}] We are managing the bloop server".format(SCRIPT_NAME))


def run_bloop(bloop, args, config_dir):
    proc = subprocess.run([bloop, args, "-c", config_dir],
                          stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    return proc.returncode == 0


def edit_config_files(workspacedir, configdir):
    filenames = [name for name in os.listdir(configdir) if name.endswith(".json")]
    configfiles = ["{}/{}".format(configdir, fn) for fn in filenames]
    print(configfiles)
    for line in fileinput.input(files=configfiles, inplace=True):
        print(re.sub(r'\$WORKSPACE', str(workspacedir), line), end='')


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('--workspace', default=os.getcwd(), type=Path,
                        help='Path to top of workspace, defaults to os.getcwd()')
    parser.add_argument('--bloop-dir', '-b', required=True, type=Path,
                        help='Path to bloop install directory, relative to workspace')
    parser.add_argument('--config-dir', '-c', required=True, type=Path,
                        help=('Path to bloop config directory, relative to workspace. '
                              'THIS SCRIPT WILL OVERWRITE THIS ARGUMENT TO BLOOP'))
    parser.add_argument('--bloop-args', required=True,
                        help='Arguments passed to bloop (except --config-dir/-c)')

    args = parser.parse_args()
    print(args)

    workdir = "{}/jacktemp".format(args.config_dir)

    # copy real config dir to workdir
    try:
        # TODO make this more precise, we really only want *.json and *.bin files
        shutil.copytree(args.config_dir, workdir)
    except FileExistsError:
        print("Temporary working directory '{}' already exists, please delete it".format(workdir))
        sys.exit(1)

    launch_bloop(args.bloop_dir)

    # Edit all of the [project].json files
    edit_config_files(args.workspace, workdir)

    # Run bloop
    run_bloop(bloop_exe(args.bloop_dir), args.bloop_args, workdir)

    # Copy [project]-analysis.bin files back
    # TODO implement

    # Clean up
    #shutil.rmtree(workdir)


# TODO Check this algorithm and if it's properly threadsafe
if __name__ == "__main__":
    main()
    #print(os.getcwd())
    #print(sys.argv[0])
    #print(args.dir)
    #print(args.bloop)

    # TODO
    # - run bloop_server (or swallow it into this script)
    # - run bloop compile [project]


