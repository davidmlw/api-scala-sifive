#!/usr/bin/env python3
"""Bloop Wake Wrapper

This script wraps Bloop (https://scalacenter.github.io/bloop/) to make it
relocatable.

It checks to see if Bloop is already running, if it is not, it launches Bloop
with a timeout. It then takes a bloop config template (with $WORKSPACE
wildcards) and replaces them with absolute paths to make a real bloop config
file. This "real" bloop config file can then be used by bloop for compilation.
The config files are generated every time in order to make this relocatable.
"""
# TODO Should the path to the jar command be an argument?

import os
import sys
import time
import subprocess
import argparse
import re
import shutil
import json
import zipfile
import itertools

# Import scalaplugin from wit
sys.path.append("wit/lib")
import scalaplugin

if sys.version_info[0] < 3 or sys.version_info[1] < 5:
    print("This program requires Python version 3.5 or newer!")
    sys.exit(1)


SCRIPT_DIR = os.path.dirname(os.path.realpath(__file__))
SCRIPT_NAME = os.path.basename(__file__)


def pretty_cmd(cmd):
    def wrap(s):
        return '"{}"'.format(s) if ' ' in s else s
    return ' '.join([wrap(s) for s in cmd])


# TODO unify with scalaplugin
def ivy_deps_file(directory):
    return "{}/ivydependencies.json".format(directory)


# TODO unify with scalaplugin
def scala_version_dep(version):
    return "org.scala-lang:scala-compiler:{}".format(version)


# Uses ivydependencies.json to get the ivy
def get_bloop_artifacts():
    ivyfile = ivy_deps_file(SCRIPT_DIR)
    contents = scalaplugin.read_ivy_file(ivyfile)[0]
    version = contents['scalaVersion']
    deps = [scalaplugin.expand_scala_dep(version, dep) for dep in contents['dependencies']]
    allDeps = deps + [scala_version_dep(version)]
    return allDeps


def bloop_classpath(coursier, cache):
    deps = get_bloop_artifacts()
    cmd = [coursier, "fetch", "-m", "offline", "--classpath", "--cache", cache] + deps
    proc = subprocess.run(cmd, stdout=subprocess.PIPE, universal_newlines=True)
    if proc.returncode != 0:
        return None
    return proc.stdout.rstrip()


def run_bloop(coursier, cache, args):
    classpath = bloop_classpath(coursier, cache)
    if classpath is None:
        return 1
    arglist = args.split()
    cmd = ["java", "-Xss8M", "-cp", classpath, "bloop.Cli"] + arglist
    proc = subprocess.run(cmd)
    return proc.returncode == 0


def create_config_file(workspace, infile, outfile):
    with open(infile, "r") as fin:
        with open(outfile, "w") as fout:
            for line in fin.readlines():
                fout.write(re.sub(r'\$WORKSPACE', str(workspace), line))


def make_jar(bloopconfig, jarfile):
    """
    This function is intended to create reproducible jars
    The jar command does appear to do this properly, so we have to do it ourselves
    """
    classes_dir = ""
    resource_dirs = []
    with open(bloopconfig, "r") as json_file:
        data = json.load(json_file)
        classes_dir = data['project']['classesDir']
        resource_dirs = data['project']['resources']
    # If it doesn't exist, bloop had nothing to compile, make a directory for the sake of the jar
    if not os.path.isdir(classes_dir):
        os.mkdir(classes_dir)

    all_dirs = [classes_dir] + [d for d in resource_dirs if os.path.isdir(d)]
    with zipfile.ZipFile(jarfile, 'w', zipfile.ZIP_DEFLATED) as zip:
        written = set()
        for dir in all_dirs:
            for root, dirs, files in os.walk(dir):
                for f in itertools.chain(dirs, files):
                    abspath = os.path.join(root, f)
                    relpath = os.path.relpath(abspath, dir)
                    # https://stackoverflow.com/questions/434641#6297838
                    # Note the default time for ZipInfo is 1 Jan 1980
                    if os.path.isfile(abspath):
                        assert relpath not in written, \
                            "Attempting to jar duplicate filename {}".format(relpath)
                        info = zipfile.ZipInfo(relpath)
                        info.external_attr = 0o664 << 16 # -rw-rw-r--
                        bytes = open(abspath, 'rb').read()
                        zip.writestr(info, bytes, zipfile.ZIP_DEFLATED)
                    elif os.path.isdir(abspath):
                        # Duplicate directories are fine
                        if relpath not in written:
                            info = zipfile.ZipInfo(relpath + '/')
                            info.external_attr = 0o40775 << 16 # drwxrwxr-x
                            info.external_attr |= 0x10 # MS-DOS directory flag
                            zip.writestr(info, '', zipfile.ZIP_STORED)
                    else:
                        raise Exception("Unexpected non-file and non-dir path {}".format(abspath))
                    written.add(relpath)


def get_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('--workspace', default=os.getcwd(), type=str,
                        help='Path to top of workspace, defaults to os.getcwd()')
    parser.add_argument('--bloop-dir', '-b', required=True, type=str,
                        help='Path to bloop install directory, relative to workspace')
    parser.add_argument('--config-template', '-t', required=True, type=str,
                        help='Path to bloop config template, relative to workspace.')
    parser.add_argument('--config-file', '-c', required=True, type=str,
                        help='Path to bloop config output, relative to workspace.')
    parser.add_argument('--coursier-cache', required=True, type=str,
                        help='Path to coursier cache, relative to workspace.')
    parser.add_argument('--bloop-args', required=True, help='Arguments passed to bloop')
    parser.add_argument('--jar', required=True, help='Output jar file for compiled class files')

    return parser.parse_args()


def main():
    args = get_args()

    create_config_file(args.workspace, args.config_template, args.config_file)

    coursier = scalaplugin.coursier_bin("{}/{}".format(args.workspace, args.bloop_dir))
    cache = "{}/{}".format(args.workspace, args.coursier_cache)

    if not run_bloop(coursier, cache, args.bloop_args):
        print("Scala compilation failed for '{}'".format(pretty_cmd(sys.argv)), file=sys.stderr)
        sys.exit(1)

    try:
        make_jar(args.config_file, args.jar)
    except Exception as e:
        print(e, file=sys.stderr)
        print("Jar creation failed for '{}'".format(pretty_cmd(sys.argv)), file=sys.stderr)
        sys.exit(1)


if __name__ == "__main__":
    main()
