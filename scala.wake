
# Important directories
def root = mkdir "build/{here}"
def bloopDir = mkdir "{root.getPathName}/bloop"
def bloopInstall = "scala"
def ivyCache = "ivycache"

# Virtual job that owns all fetched ivy dependencies
def ivyCacheDeps _ =
  def fs = files ivyCache '.*'
  makePlan ("<ivycache>", ivyCache, Nil) Nil
  | setPlanKeep      False
  | setPlanFnOutputs (\_ fs)
  | runJobWith       virtualRunner
  | getJobOutputs

global def readIvyDepsJSON dir =
  source "{dir}/ivydependencies.json" | getPathName | parseJSONFile

# Should be installed by wit
def coursierBin =
  def bins = files bloopInstall '.*coursier.*'
  def bin = bins | head | makeStatePath
  try (\_ raise "Coursier not found! Did you run `wit fetch-scala`?") bin

def bloopWake = sources here "bloop_wake" | head

# TODO
# - Can we make this a fuse job? For some reason coursier can't find visible inputs
# Given List IvyDep, returns Pair (List Path) (List Path)
# Return is Pair (Paths to jars of the input IvyDeps) (Paths to jars of transitive dependencies)
global def resolveIvyDeps deps =
  def checkAndToString dep =
    if dep.isIvyDepExpanded then dep.ivyDepToString else raise "Unexpanded IvyDep {format dep}!"
  def depStrs = map checkAndToString deps
  def cachedDeps = ivyCacheDeps Unit
  def cmd = coursierBin.getPathName, "fetch", "-q", "--cache", ivyCache, "-m", "offline", depStrs
  def plan = makeManualPlan cmd (coursierBin, cachedDeps) (\_ Nil)
  def job = plan.runJob
  def strs =
    if job.getJobStatus == 0
    then job.getJobStdout | tokenize '\n' | filter (_ !=~ "")
    else raise "Cannot resolve ivy dependencies, have you run `wit fetch-scala`?"
  # Using the output of coursier, we get the actual paths and filter into requested and transitive
  def depJar dep = "{dep.getIvyDepName}-{dep.getIvyDepRev}.jar"
  match (splitBy (\s exists (matches ".*/{_.depJar}" s) deps) strs)
    Pair req trans =
      def reqTree = ltree scmpRaw req
      def transTree = ltree scmpRaw trans
      def reqJars = filter (_.getPathName ∈ reqTree) cachedDeps
      def transJars = filter (_.getPathName ∈ transTree) cachedDeps
      Pair reqJars transJars

# TODO improve
global def runIvyDep dep = resolveIvyDeps (dep, Nil) | (\(Pair x y) x ++ y) | runJava

# TODO improve
# - Customize java installation
# - Add Java options (eg. -Xmx4G)
# visible excludes classpath
global def runJava classpath main args visible =
  def java = which "java"
  def cp = "-cp", (map getPathName classpath | catWith ":"), Nil
  def cmd = java, cp ++ (main, args)
  job cmd (visible ++ classpath)

# TODO Dotty support?
tuple ScalaVersion =
  global Major: Integer
  global Minor: Integer

global def scalaVersionToString (ScalaVersion major minor) =
  "2.{str major}.{str minor}"

global def scalaVersionMajorString (ScalaVersion major _) =
  "2.{str major}"

global def stringToScalaVersion str =
  match (tokenize '\.' str)
    "2", major, minor, Nil =
      (ScalaVersion _ _) | reraise (int major) | reraise (int minor)
    _ = raise "Only Scala 2.X.Y accepted, got '{str}'"

global data ScalaCrossVersion =
  Constant
  Major
  Minor

# TODO additional resolvers/repositories
# Should the cross versions be factored out?
tuple IvyDep =
  global Org:          String
  global Name:         String
  global Rev:          String
  global CrossVersion: ScalaCrossVersion

# rename stringToIvyDep
global def stringToIvyDep string =
  match (tokenize ':' string)
    org, name, rev, Nil         = IvyDep org name rev Constant
    org, "", name, rev, Nil     = IvyDep org name rev Major
    org, "", "", name, rev, Nil = IvyDep org name rev Minor
    _                           = raise "Malformed Ivy Dep '{string}'"

global def ivyDepToString dep = match dep
  IvyDep org name rev cross = match cross
    Constant = "{org}:{name}:{rev}"
    Major    = "{org}::{name}:{rev}"
    Minor    = "{org}:::{name}:{rev}"

global def expandIvyDep version dep = match dep
  IvyDep org name rev cross = match cross
    Constant = dep
    Major    = IvyDep org "{name}_{scalaVersionMajorString version}" rev Constant
    Minor    = IvyDep org "{name}_{scalaVersionToString version}" rev Constant

global def isIvyDepExpanded dep = match dep.getIvyDepCrossVersion
  Constant = True
  _        = False

global def scalaCompilerIvyDep version =
  IvyDep "org.scala-lang" "scala-compiler" (scalaVersionToString version) Constant
global def scalaLibraryIvyDep version =
  IvyDep "org.scala-lang" "scala-library" (scalaVersionToString version) Constant

tuple ScalaModule =
  global Name:               String
  global RootDir:            String
  global ScalaVersion:       ScalaVersion
  global IvyDeps:            List IvyDep
  global Deps:               List ScalaModule
  # These are relative to RootDir
  global SourceDirs:         List String
  global ResourceDirs:       List String
  # These operations could be expensive
  global FnGeneratedSources: Unit => List Path
  global ScalacOptions:      List String

def addSBTDefaults module =
  def sourceDirs = "src/main/scala", "src/main/java", _
  def resourceDirs = "src/main/resources", _
  module
  | editScalaModuleSourceDirs sourceDirs
  | editScalaModuleResourceDirs resourceDirs

global def makeScalaModule name dir version =
  ScalaModule name dir version Nil Nil Nil Nil (\_ Nil) Nil
  | addSBTDefaults

global def makeScalaModuleFromJSON dir name =
  def json = readIvyDepsJSON dir
  def scalaVersion =
    json // name // "scalaVersion"
    | getJString
    | getOrElse (raise "scalaVersion not found!")
    | stringToScalaVersion
  def ivyDeps =
    json // name // "dependencies"
    | getJArray
    | getOrElse Nil
    | mapPartial getJString
    | map stringToIvyDep
  makeScalaModule name dir scalaVersion
  | setScalaModuleIvyDeps ivyDeps

def compareScalaModules a b =
  scmpRaw a.getScalaModuleName b.getScalaModuleName

def memoizeGenSrcs name module = memoize 1 (
  module.getScalaModuleFnGeneratedSources Unit
)
global def getScalaModuleGeneratedSources module =
  memoizeGenSrcs module.getScalaModuleName module

# WHy is this global? Make Expanded instead of Resolved
def getScalaModuleExpandedSourceDirs module =
  def mroot = module.getScalaModuleRootDir
  map (simplify "{mroot}/{_}") module.getScalaModuleSourceDirs

def getScalaModuleExpandedResourceDirs module =
  def mroot = module.getScalaModuleRootDir
  map (simplify "{mroot}/{_}") module.getScalaModuleResourceDirs

global def getScalaModuleTransDeps module =
  def helper tree mod = match (mod ∈ tree)
    True = tree
    False = foldl helper (tinsert mod tree) mod.getScalaModuleDeps
  helper (tnew compareScalaModules) module | tlist

def flip f a b = f b a

# Excludes Scala itself
# Does not run expand ivy dependencies, nor does it invoke coursier
# TODO Make helper that takes an accumulator tree and checks if already present, returns if so, otherwise continues
global def getScalaModuleTransIvyDeps module =
  def transDeps = module.getScalaModuleTransDeps
  def tree = tnew (scmpRaw _.ivyDepToString _.ivyDepToString)
  map getScalaModuleIvyDeps transDeps
  | flatten
  | foldl tinsert.flip tree
  | tlist

# Prefix with wildcard for the workspace
def inws path = "$WORKSPACE/{path}"

# TODO implement scalacOptions
def bloopScalaLibJSON scalaVersion scalacOptions =
  def x → y = Pair x y
  def ivyDep = scalaCompilerIvyDep scalaVersion
  def ivyJars = resolveIvyDeps (ivyDep, Nil) | (\(Pair x y) x ++ y)
  def org = "organization" → JString ivyDep.getIvyDepOrg
  def name = "name" → JString ivyDep.getIvyDepName
  def version = "version" → JString ivyDep.getIvyDepRev
  def options = "options" → scalacOptions | map JString | JArray
  def jars = "jars" → ivyJars | map getPathName | map inws | map JString | JArray
  def setup =
    def fields =
      "order" → JString "mixed"
      , "addLibraryToBootClasspath" → JBoolean True
      , "addCompilerToClasspath" → JBoolean False
      , "addExtraJarsToClasspath" → JBoolean False
      , "manageBootClasspath" → JBoolean True
      , "filterLibraryFromClasspath" → JBoolean True
      , Nil
    "setup" → JObject fields
  JObject (org, name, version, options, jars, setup, Nil)

def buildDir module = "{root.getPathName}/{module.getScalaModuleName}"
def bloopOutDir module = "{bloopDir.getPathName}/{module.getScalaModuleName}"
def moduleClassesDir module = "{module.buildDir}/classes"

def bloopScalaModuleJSON module =
  def bloopVersion = "1.2.5"
  def x → y = Pair x y
  def project = match module
    ScalaModule name dir ver _ modDeps _ _ _ scalacOpts =
      def myDir = bloopOutDir module
      def ivyDeps = module.getScalaModuleTransIvyDeps
      def deps = map (expandIvyDep ver) ivyDeps
      def scalaLib = scalaLibraryIvyDep ver
      def ivyClasspath = resolveIvyDeps (scalaLib, deps) | (\(Pair x y) x ++ y) | map getPathName
      def transDeps = module.getScalaModuleTransDeps
      def depClasspath = transDeps | map moduleClassesDir
      def genSrcs = module.getScalaModuleGeneratedSources
      def sources = module.getScalaModuleExpandedSourceDirs ++ (map getPathName genSrcs)
      def resources = module.getScalaModuleExpandedResourceDirs
      def fields =
        "name" → JString name
        , "directory" → JString dir.inws
        , "sources" → sources | map inws | map JString | JArray
        , "dependencies" → map getScalaModuleName modDeps | map JString | JArray
        , "classpath" → ivyClasspath ++ depClasspath | map inws | map JString | JArray
        , "out" → module.bloopOutDir.inws | JString
        , "classesDir" → module.moduleClassesDir.inws | JString
        , "resources" → resources | map inws | map JString | JArray
        , "scala" → bloopScalaLibJSON ver scalacOpts
        , Nil
      JObject fields
  def bloop = "version" → JString bloopVersion
  def proj = "project" → project
  JObject (bloop, proj, Nil)

# TODO is this necessary anymore?
def memoizeBloopTemplate name module = memoize 1 (
  def content = bloopScalaModuleJSON module | prettyJSON
  write (bloopTemplateName module) content
)
def bloopTemplate module =
  memoizeBloopTemplate module.getScalaModuleName module

def bloopTemplateName module =
  def name = module.getScalaModuleName
  "{bloopDir.getPathName}/{name}.json.template"

def bloopConfigName module =
  def name = module.getScalaModuleName
  "{bloopDir.getPathName}/{name}.json"

# Compiles a ScalaModule, returns bloop config and generated jar file
def memoizeBloopCompile name module = memoize 1 (
  def statedir = mkdir module.bloopOutDir
  def bin = bloopWake
  def transDeps = module.getScalaModuleTransDeps
  def configTemplate = module.bloopTemplate
  def configFilename = module.bloopConfigName
  def jarDir = mkdir "{module.buildDir}/jar"
  def jarName = "{jarDir.getPathName}/{name}.jar"
  def inputs =
    def sourceFiles =
      def dirs = module.getScalaModuleExpandedSourceDirs
      def auto = map (sources _ '.*\.(scala|java)') dirs | flatten
      def resources = map (sources _ '.*') module.getScalaModuleExpandedResourceDirs | flatten
      def unmanaged = module.getScalaModuleGeneratedSources
      unmanaged ++ resources ++ auto
    def depJars = map compileScalaModule transDeps
    def configs = map bloopConfig transDeps
    def timeout = sources here "bloop_timeout" | head
    bin, timeout, bloopWake, configTemplate, configs ++ depJars ++ sourceFiles
  def bloopArgs =
    def args = "compile", "-c", bloopDir.getPathName, module.getScalaModuleName, Nil
    args | catWith " "
  def cmd =
    bin.getPathName, "-t", configTemplate.getPathName, "-c", configFilename
    , "-b", bloopInstall, "--bloop-args", bloopArgs, "--jar", jarName, Nil
  def fnoutputs _ = configFilename, jarName, Nil
  def plan =
    makeManualPlan cmd inputs fnoutputs
    | setPlanFnInputs (\_ inputs | map getPathName)
    | runJob
  def outputs = plan.getJobOutputs
  def findjson = outputs | filter (matches configFilename _.getPathName)
  def findjar = outputs | filter (matches jarName _.getPathName)
  match (Pair findjson findjar)
    Pair (json, Nil) (jar, Nil) = Pair json jar
    _ = raise "Expected exactly one json and one jar, got {format outputs}"
)
def bloopCompile module = memoizeBloopCompile module.getScalaModuleName module

def bloopConfig module = bloopCompile module | getPairFirst

global def compileScalaModule module = bloopCompile module | getPairSecond

# Returns the full classpath to run the module
global def scalaModuleClasspath module =
  def version = module.getScalaModuleScalaVersion
  def scalaIvyDep = scalaCompilerIvyDep version
  def ivyJars =
    def ivyDeps = (scalaIvyDep, module.getScalaModuleTransIvyDeps) | map (expandIvyDep version)
    resolveIvyDeps ivyDeps | (\(Pair x y) x ++ y)
  def moduleJars = (module, module.getScalaModuleTransDeps) | map compileScalaModule
  moduleJars ++ ivyJars
