
def root = mkdir 0775 "./.scala-wake"

global def coursierBin _ =
  def version = "1.1.0-M11-2"
  def dir = mkdir 0775 "{root.getPathName}/bin"
  def getter = sources here 'getCoursier\.sh' | head
  def cmd = getter.getPathName, dir.getPathName, version, Nil
  def doit = job cmd (dir, getter, Nil)
  doit.getJobOutput

# TODO Dotty support?
tuple ScalaVersion =
  global Major Integer
  global Minor Integer

def scalaVersionToString = match _
  ScalaVersion major minor = "2.{str(major)}.{str(minor)}"

global def makeScalaVersion str =
  def err = raise "Only Scala 2.X.Y accepted, got '{str}'"
  match (tokenize '\.' str)
    majormajor, major, minor, Nil =
      if majormajor ==~ "2" then ScalaVersion (int major) (int minor) else err
    _ = err

# TODO additional resolvers/repositories
tuple IvyDep =
  global Org String
  global Name String
  global Rev String

global def makeScalaIvyDep string version =
  def err = raise "Malformed Scala Ivy Dep '{string}'"
  match (tokenize ':' string)
    org, name, rev, Nil = IvyDep org name rev
    org, blank, name, rev, Nil =
      def namex = "{name}_2.{str(version.getScalaVersionMajor)}"
      if "{blank}x" ==~ "x" then IvyDep org namex rev else err
    _ = err

tuple ScalaModule =
  global Name String
  global RootDir String
  global ScalaVersion ScalaVersion
  global IvyDeps List IvyDep
  global SourceDirs List String
  global ResourceDirs List String

# Should the source dirs be relative to root or incldue it?
global def makeSBTScalaModule name dir version =
  def scalaVersion = makeScalaVersion version
  def sourceDirs = map ("{dir}/{_}") ("src/main/scala", "src/main/java", Nil)
  def resourceDirs = "{dir}/src/main/resources", Nil
  ScalaModule name dir scalaVersion Nil sourceDirs resourceDirs

# Helpers for generating files with tabbing
data Scope =
  Line String
  Scope String (List Scope) String
  Scopes (List Scope)

global def scopeToLines = match _
  Line s = s, Nil
  Scope pre scopes post =
    def scopesx = map scopeToLines scopes | flatten | map ("  {_}")
    (pre, scopesx) ++ (post, Nil)
  Scopes scopes = map scopeToLines scopes | flatten

global def millFileContents = match _
  ScalaModule name dir version deps sources resources =
    def imports = Line "import mill._, scalalib._\nimport ammonite.ops._\n"
    def verStr = Line "def scalaVersion = \"{version.scalaVersionToString}\""
    def sourceScope =
      def xs = map (Line "os.pwd / up / up / \"{name}\" / RelPath(\"{_}\"),") sources
      Scope "def sources = T.sources(" xs ")"
    def moduleScope =
      def xs = verStr, sourceScope, Nil
      Scope "object `{name}` extends ScalaModule \{" xs "\}"
    Scopes (imports, moduleScope, Nil) | scopeToLines | catWith "\n"

global def buildDir module = "{root.getPathName}/{module.getScalaModuleName}"

global def millFile2 module =
  def fn = "{module.buildDir}/build.sc"
  def _ = println fn
  def contents = millFileContents module
  write 0644 fn contents

global def jack =
  def module = makeSBTScalaModule "test-proj" "test-proj" "2.12.4"
  millFileContents module


#global def scalaModuleJar module =
